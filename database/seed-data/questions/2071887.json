{"id":"/questions//questions/2071887.json.json", "creationDate":"2010-01-15T13:43:03.200", "body":"\n\nIn theory, it should be possible to at least brute force a verification of a lock-free algorithm (there are only so many combinations of function calls intersecting). Are there any tools or formal reasoning processes available to actually prove that a lock-free algorithm is correct (ideally it should also be able to check for race conditions and the ABA problem as well)?\n\nNote: If you know a way to just prove one point (e.g. only prove that it is safe from the ABA problem) or a problem I haven't mentioned then post the solution anyway. In the worst case scenario, each method can be done in turn to fully verify it.", "lastActivityDate":"2013-11-05T09:42:40.673", "title":"How can I verify lock-free algorithms?", "tags":[["algorithm"], ["verification"], ["lock-free"]], "docScore":0, "comments":[], "answers":[], "creationYearMonth":"201001", "itemTally":0, "owner":null}