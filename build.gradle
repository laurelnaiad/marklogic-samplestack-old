buildscript {
	ext {
		springBootVersion = '1.0.0.BUILD-SNAPSHOT'
		markLogicBootVersion = '1.0.0.BUILD-SNAPSHOT'
	}
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath 'com.moowork.gradle:gradle-node-plugin:0.4'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'groovy'
apply plugin: NodePlugin
apply plugin: SpawnOngoingPlugin

task markLogicInit(type: MarkLogicInitTask)

task markLogicTeardown(type: MarkLogicTeardownTask)

task markLogicApplication(type: MarkLogicApplicationTask)

task markLogicExtendREST(type: RESTConfigureTask) {
    transforms = "src/main/rest-api/transforms"
    extensions = "src/main/rest-api/ext"
}

task loadGithub(type: GithubSlurpTask) {
   //file = "src/test/resources/github/githubSample.json"
   // file = "/tmp/temp8026336001481176720"
   file = "/tmp/temp2418963333306216496"
}

task loadGithubFromArchive(type: GithubSlurpTask) {
   url = "http://data.githubarchive.org/2012-04-11-15.json.gz"
}

task gulpDefault(type: SpawnOngoingTask) {
    command = "gulp --color"
    processName = "gulp"
    directory = "src/main/web"
    errPrefix = "ERROR: "
    outPrefix = ""
    readySentinel = "server listening"
}


/**
 * TODO: PR for node plugin that allows for child process
 * as of now, we can't use this, but it would be better
 * to submit a patch to it than to roll our own, since
 * the node plugin has a whole bunch of cross-platform
 * handling stuff (and can install node if not present)
 */
/*
task gulpDefault(type: NodeTask) {
    script = file('src/main/web/node_modules/gulp/bin/gulp')
    args = ['--color']
    execOverrides {
        it.workingDir = 'src/main/web'
    }
}
*/

bootRun.dependsOn gulpDefault

// this is an example gradle task that can run
// a specific gulp task
task gulpBuild(type: NodeTask) {
    script = file('src/main/webapp/node_modules/gulp/bin/gulp')
    args = ['build']
    execOverrides {
        it.workingDir = 'src/main/webapp'
    }
}

/* The code repositories to consult for dependencies */
repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    // not needed for now maven { url "http://developer.marklogic.com/maven2" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-integration:${springBootVersion}")
    // compile("org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}")
    // compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
    }
    compile("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")
    compile('com.marklogic:client-api-java:3.0-SNAPSHOT') {
        exclude(group: 'org.slf4j')
    }
    testCompile('com.jayway.jsonpath:json-path:0.9.1') {
        exclude(group: 'org.slf4j')
    }
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}



/* task to generate the gradle wrapper script */
task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
