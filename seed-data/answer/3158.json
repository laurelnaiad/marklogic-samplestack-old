{"Body":"<h1>Natural Languages as Regular Languages</h1>\n\n<p>Before we can begin, a bit of house keeping. I will be using regular expressions, regular languages, and finite state automatas interchangeably. While this is not strictly true, it is sufficient for the scope of this answer. See <a href=\"http://homepage.cs.uiowa.edu/~hzhang/c19/ch12.pdf\" rel=\"nofollow\">here</a> for more information.</p>\n\n<p>This is a fairly difficult question as the only way to prove a language <em>is</em> regular is by <a href=\"http://en.wikipedia.org/wiki/Regular_language#Closure_properties\" rel=\"nofollow\">constructing it from the unions, intersections, compliments, and relative compliments of known relative languages</a>. Obviously natural languages would require a relatively complex regular language to describe it meaning a complicated derivation.</p>\n\n<p>It is much easier to prove a language is not regular. A <a href=\"http://en.wikipedia.org/wiki/Pumping_lemma_for_regular_languages\" rel=\"nofollow\">Pumping Lemma</a> is a <em>necessary</em> (but <strong>not</strong> <em>sufficient</em>) property of regular languages. I.e. if no pumping lemma can be found for a given language it cannot be regular but the existence of a valid pumping lemma does not prove the language is regular. Essentially, a pumping lemma is any <em>x</em>, <em>y</em>, and <em>z</em> such that <em>y</em> is not empty and <strong>xy<sup>n</sup>z</strong> can be parsed by a given regular language for all values of n â‰¥ 0.</p>\n\n<h2>Testing English for Irregularity</h2>\n\n<p>I was able to find <a href=\"http://people.umass.edu/partee/726_04/lectures/Lecture%2013%20revised%20Are%20NLs%20Finite-state.pdf\" rel=\"nofollow\">this lecture</a> which takes an intersection of English and a regular language to result in the language <strong>A<sup>n</sup>B<sup>n-1</sup><em>died</em></strong> where A denotes a set of determiner phrases (e.g. {<em>the dog</em>, <em>the cat</em>, <em>the mouse</em>, etc.}) and B denotes a set of transitive verbs (e.g. {<em>chased</em>, <em>bit</em>, <em>admired</em>, etc.}). Remember that the intersection of two regular languages is also regular. This means that if no valid pumping lemma can be found then English, by deduction, must be irregular.</p>\n\n<p>Given this regular language, we have only three choices for <em>y</em>:</p>\n\n<ol>\n<li><em>y</em> is all As</li>\n<li><em>y</em> is all Bs</li>\n<li><em>y</em> is a mixture of As and Bs</li>\n</ol>\n\n<h3>*y* is all As</h3>\n\n<p>Assuming <em>x</em> is \"the cat\", <em>y</em> is \"the dog\", and <em>z</em> is \"chased died\" then for n = 1 we get: \"the cat the dog chased died\", which is obviously valid (i.e. can be parsed by <strong>A<sup>n</sup>B<sup>n-1</sup><em>died</em></strong>). However, for n = 0 we see \"the dog chased died\" which is obviously invalid. Similarly, for n = 2 (\"the dog the cat the cat chased died\") or higher, the output is obviously invalid.</p>\n\n<p>More generically, if <em>y</em> is all As and the number of times <em>y</em> appears can be variable then it's impossible to ensure that there for exactly one fewer B than As. Therefore there is no possible <em>y</em> such that <em>y</em> is all As.</p>\n\n<h3>*y* is all Bs</h3>\n\n<p>Assuming <em>y</em> is all Bs (e.g. <em>x</em> is \"the cat the dog the man\", <em>y</em> is \"admired\", and <em>z</em> is \"chased died\"), we see a similar problem to the above where we cannot ensure exactly one fewer B than As</p>\n\n<h3>*y* is a mixture of As and Bs</h3>\n\n<p>Assuming <em>y</em> is a mixture (e.g. <em>x</em> is \"the cat\", <em>y</em> is \"the dog chased\", and <em>z</em> is \"died\") seems to work a bit better as both n = 0 and n = 1 are valid (\"the cat died\" and \"the cat the dog chased died\" respectively) but things start to fall apart at n = 2: \"the cat the dog chased the dog chased died\".</p>\n\n<p>More generically, if <em>y</em> is a mixture of As and Bs ten as <em>y</em> repeats some B <strong>must</strong> occur before some A, which is banned by the regular language <strong>A<sup>n</sup>B<sup>n-1</sup><em>died</em></strong>.</p>\n\n<h3>Conclusion</h3>\n\n<p>There is no possibly <em>y</em> such that <strong>xy<sup>n</sup>z</strong> is valid for <strong>A<sup>n</sup>B<sup>n-1</sup><em>died</em></strong> across all values of n. Therefore <strong>xy<sup>n</sup>z</strong> is not regular, therefore English is not regular, therefore English cannot be [fully] expressed by a regular expression.</p>\n\n<p>Obviously, this only applies to English and I cannot say that there is no natural language that can be fully expressed by a regular expression, but I highly doubt it. For any natural language one could repeat a similar test to prove it is not regular.</p>\n\n<p>Finally, note that I am talking about describing the language <em>fully</em>. That is not to say that under certain conditions a regular expression cannot describe a subset of a natural language <em>nor</em> that regular expressions cannot <em>approximate</em> a natural language in limited contexts. It depends on the scope you're working with and if you can justify the loss of accuracy for increased computability.</p>\n\n<h1>Natural Languages as Context-free Grammars</h1>\n\n<p>Here is where the thoroughness of my answer takes a drop as I am less familiar with examining and proving context-free grammars. However, I was able to find a few articles which address the issue of natural languages as context-free grammars (usually to the negative). <a href=\"http://www.jstor.org/discover/10.2307/4178381?uid=3739448&amp;uid=2129&amp;uid=2&amp;uid=70&amp;uid=3737720&amp;uid=4&amp;sid=21101602539093\" rel=\"nofollow\">Here</a> is an article proving English is not context-free. <a href=\"http://dash.harvard.edu/bitstream/handle/1/2026618/Shieber_EvidenceAgainst.pdf?sequence=2\" rel=\"nofollow\">Here</a> is another article making a similar argument for Swiss German.</p>\n\n<p>Both these articles seem to take a similar approach to the regular language process above where they user the closure properties of context-free grammars to generate a subset of a natural language then prove that that subset is non-context-free thus proving the full natural language is also non-context free.</p>\n", "Id":"3158", "ParentId":"3154", "LastEditorUserId":"1055", "CreationDate":"2013-02-01T14:14:55.513", "OwnerUserId":"1055", "PostTypeId":"2", "comments":[], "LastEditDate":"2013-02-01T17:44:28.910", "LastEditedUser":{"UpVotes":"102", "WebsiteUrl":"", "Location":"Seoul, South Korea", "Id":"1055", "DownVotes":"9", "AccountId":"1453460", "Views":"21", "Reputation":"1947", "CreationDate":"2012-05-29T05:50:57.073", "DisplayName":"acattle", "LastAccessDate":"2014-01-17T00:59:41.983", "AboutMe":"<p>I am currently studying for an MA in Computational Linguistics even though my background is not in linguistics. I discovered Computational Linguistics while receiving my B.A.Sc in Software Engineering when I built a basic bigram parser for an AI assignment. This caused me to become interested in linguistics and to take a few introductory level courses. I currently have completed my first year of my masters and am currently looking for a thesis topic.</p>\n"}, "LastActivityDate":"2013-02-01T17:44:28.910", "Score":"2", "CommentCount":"5", "OwnerUser":{"UpVotes":"102", "WebsiteUrl":"", "Location":"Seoul, South Korea", "Id":"1055", "DownVotes":"9", "AccountId":"1453460", "Views":"21", "Reputation":"1947", "CreationDate":"2012-05-29T05:50:57.073", "DisplayName":"acattle", "LastAccessDate":"2014-01-17T00:59:41.983", "AboutMe":"<p>I am currently studying for an MA in Computational Linguistics even though my background is not in linguistics. I discovered Computational Linguistics while receiving my B.A.Sc in Software Engineering when I built a basic bigram parser for an AI assignment. This caused me to become interested in linguistics and to take a few introductory level courses. I currently have completed my first year of my masters and am currently looking for a thesis topic.</p>\n"}}