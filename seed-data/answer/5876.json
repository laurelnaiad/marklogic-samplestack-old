{"OwnerUser":{"UpVotes":"123", "WebsiteUrl":"https://sites.google.com/site/patrickdelliott/", "ProfileImageUrl":"http://i.stack.imgur.com/HGYBE.jpg", "Id":"2328", "AccountId":"3146009", "CreationDate":"2013-08-07T11:16:59.797", "AboutMe":"<p>I'm a PhD student in Linguistics at University College London. My primary area of interest is generative linguistics, and specifically syntactic and semantic theory. More narrowly still, i'm interested in ellipsis, comparatives, and binding theory. <a href=\"https://twitter.com/patrickdelliott\" rel=\"nofollow\">Follow me on twitter!</a></p>\n", "Location":"London, United Kingdom", "DownVotes":"43", "Views":"43", "Reputation":"970", "DisplayName":"P Elliott", "LastAccessDate":"2014-01-19T02:32:31.120"}, "comments":[], "Body":"<p>Recursion in phrase structure grammar is where an expression of some type contains an expression of that same type. Under this definition, chains of relative clauses count as an instance of recursion. We can see this more clearly by drawing a (simplified) Phrase Structure Tree of your example (note i'm abstracting away from irrelevant details, e.g. the syntax of relative clauses. The 't' in the subject position of each relative clause stands in for an empty category - every theory of relativisation has to assume something like this):</p>\n\n<blockquote>\n  <p>(1) [S [NP [NP the cat] [CP [C that] [S [NP t] [VP [Vt killed] [NP [NP the\n  bird] [CP [C that] [S [NP t] [VP [Vt ate] [NP [NP the rat] [CP [C\n  that] [S [N{ t] [VP [Vt ate] [NP the cheese]]]]]]]]]]]]] [VP [Vi\n  left]] ]</p>\n</blockquote>\n\n<p><img src=\"http://i.stack.imgur.com/gKKmL.png\" alt=\"enter image description here\"></p>\n\n<p>The tree can be characterised by the following set of rewrite rules:</p>\n\n<blockquote>\n  <p>S -> NP VP<br>\n  VP -> Vi<br>\n  VP -> Vt NP<br>\n  NP -> NP <strong>CP</strong><br>\n  <strong>CP</strong> -> C S<br>\n  Vt -> killed/ate<br>\n  Vi -> left<br>\n  NP -> the cat/the bird/the rat/the cheese/t<br>\n  C -> that</p>\n</blockquote>\n\n<p>It's easy to see that as a consequence of these rewrite rules, we can build PS-trees with an in principle infinite number of recursively embedded CPs, since S is one of the outputs of CP, NP is one of the outputs of S, and CP is one of the outputs of NP, so by transitivity, CP can contain CP.</p>\n\n<p>Now let's consider your example involving a string of attributive adjectives. Under standard assumptions, adjectives are <strong>adjoined</strong> to the Noun Phrase - this captures the fact that an NP modified by any number of adjectives still behaves as an NP externally. Consider the following simple example + PS-tree:</p>\n\n<blockquote>\n  <p>(2) [S [NP [AP [A tall]] [NP [AP [A blonde]] [NP [AP [A beautiful]]\n  [NP [N women]]]]] [PredP [Pred are] [AP [A intimidating]]]]</p>\n</blockquote>\n\n<p><img src=\"http://i.stack.imgur.com/w7Gfs.png\" alt=\"enter image description here\"></p>\n\n<p>We can characterise the tree via the following set of rewrite rules:</p>\n\n<blockquote>\n  <p>S -> NP PredP<br>\n  <strong>NP</strong> -> AP <strong>NP</strong><br>\n  NP -> N<br>\n  AP -> A<br>\n  PredP -> Pred AP<br>\n  N -> women<br>\n  A -> tall/blonde/beautiful/intimidating<br>\n  Pred -> are  </p>\n</blockquote>\n\n<p>It's easy to see just from inspecting the tree that we aren't dealing here with <strong>recursively embedded APs</strong>, since in no instance does an AP contain an expression of the type AP. Rather, what we have here is an instance of <strong>recursively embedded NPs</strong>, since an expression of type NP can contain an expression of type NP. There is a rewrite rule which has NP as its input and NP as its output.</p>\n\n<p>I hope this clarifies the distinction between recursion and embedding. Recursion crucially involves embedding an expression of some type within an expression of the same type. If the types are distinct, we aren't dealing with recursion (in the narrow, linguistic sense). </p>\n", "Id":"5876", "ParentId":"5875", "CreationDate":"2013-11-10T15:50:41.790", "Score":"4", "PostTypeId":"2", "OwnerUserId":"2328", "LastActivityDate":"2013-11-10T15:50:41.790", "CommentCount":"3"}