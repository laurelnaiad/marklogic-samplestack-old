{"Body":"<p>I'm not particularly well-versed in syntax so my answer will be less than complete, but I can hopefully define some terms and give you a bit of background to make your reading a bit easier.</p>\n\n<p>First, syntax relies heavily on trees. I see you have over 1K reputation on SO, so I am going to assume you have a solid grasp on basic graph theory (specifically binary trees). A very basic syntax example is that a root S, for sentence, would have two children: NP, for noun phrase, and VP for verb phrase. Trees are a pain to draw in books and on computers, so we use [ ] brackets to help show the structure of the syntax tree where everything inside of a set of [ ] brackets denotes one node, like so:</p>\n\n<blockquote>\n  <p>S > [NP VP]<br>\n  NP > [N]<br>\n  VP > [V NP]  </p>\n  \n  <p>\"Mary eats cake\"<br>\n  S<br>\n  [NP VP]<br>\n  [[N] VP]<br>\n  [[Mary] VP]<br>\n  [[Mary] [V NP]]<br>\n  [[Mary] [eats NP]]<br>\n  [[Mary] [eats [N]]]<br>\n  [[Mary] [eats [cake]]]</p>\n</blockquote>\n\n<p>See how the  [ ] brackets trace out the rough structure of the tree? For increased readability the brackets normally also have a subscript explaining what type of node they represent. You can also see that \">\" is not the mathematical \"greater than\", but rather something akin to an arrow or \"=\". The use of \">\" in this manner is not actually standardized and will vary from author to author.</p>\n\n<p>This was a very simple example. Unfortunately, the modern understanding of syntax is not this simple and there is <strong>a lot</strong> of detail I left out. Modern syntax attempts to exclusively use binary branching to simplify the structure of each node. This is hard to do with some sentences, such as sentences with double object (aka \"ditransative\") verbs like \"give\" in \"John gave Mary the book\". Such a sentence is impossible to explain using the <code>S = [NP VP]</code> structure I used above. How can we separate \"Mary\" from \"the book\" but keep them both inside the VP while keeping a binary structure? (Incidentally, <a href=\"http://semlab5.sbs.sunysb.edu/~rlarson/larson88do.pdf\" rel=\"nofollow\">Larson</a> writes a very good paper on this subject although some of the vocabulary he uses is out-of-date).</p>\n\n<p>Basically, to account for these structure most non-leaf nodes in modern syntax trees are in the following form:</p>\n\n<blockquote>\n  <p>xP > [x yP]  </p>\n</blockquote>\n\n<p>or</p>\n\n<blockquote>\n  <p>xP > [yP x]</p>\n</blockquote>\n\n<p>Where <code>x</code> refers to some <em>literal</em> (a real word or element of speech. Something that affects how the sentence is actually <em>produced</em>). The \"P\" simply means \"Phrase\". This is related to <a href=\"http://en.wikipedia.org/wiki/X-bar_theory\" rel=\"nofollow\">X-bar theory</a>, but we'll discuss that a bit later.</p>\n\n<p>As you should know from basic graph theory, trees have no \"left leaf\" and \"right leaf\", simply links. As such, these two trees are functionally equivalent, although their <em>surface structure</em> differs. As you should also be able to see, these cause lopsided trees. When the author talks about left branching/right branching, they are simply referring to which side the nested phrase is on.</p>\n\n<p>Syntax assumes that all languages have the same basic structure with some minor differences such which side the tree grows (branches) on changing the <em>surface structure</em> of the language. Other things responsible for differing word orders across languages are object raising and checking theory and a whole host of other things, but let's start small.</p>\n\n<p>So for <a href=\"http://en.wikipedia.org/wiki/Subject%E2%80%93verb%E2%80%93object\" rel=\"nofollow\">SVO</a> languages like English, we're right branching; literals that farther from the root appear later in the sentence. Conversely, a theoretical OVS language (I don't believe there are any known OVS languages) would probably be left branching. Given a specific sentence, the syntax trees for English and the OVS language should be functionally the exact same structure; in both cases the object would be the farthest leaf from the root. However, because we branch left in OVS, it's the first object in the sentence.</p>\n\n<p>Now that we have the background out of the way, we can define terms.</p>\n\n<p>C means \"commplimentizer\". This is a bit difficult to explain but an example of a C literal in English would be \"that\". These are most noticeable when you embed sentences. Again, an oversimplification but compare \"I bought [the food] at the store.\" with \"I ate the food <strong>that</strong> I bought at the store.\" We need to use \"that\" to allow us to embed the sentence \"I bought [the food] at the store.\" It is important to note that \"I bought [the food] at the store.\" <strong>still has a C</strong>, it is just that this particular C does not happen to affect the <em>surface structure</em> of the sentence (we call this a \"null complementizer\").</p>\n\n<p>C' is pronounced as \"C bar\". To understand this, you need to know <a href=\"http://en.wikipedia.org/wiki/X-bar_theory\" rel=\"nofollow\">X-bar theory</a>. Here is where scanning an introductory text book would be helpful (I give suggestions below).</p>\n\n<p>I unfortunately do not know what C0 refers to (again, I am not particularly knowledgeable about syntax). [<strong>EDIT</strong> - According to jlovegren's answer, what this author calls C0, I simply call C. I.e. a <em>literal</em> complementizer, such as the word \"that\"]</p>\n\n<p>IP stands for \"Inflectional Phrase\". Typically it is more useful to split IP into two parts: TP (Tense Phrase) and NegP (Negation Phrase). However, IP is a useful shorthand. Basically, \"I\" will refer to any set of features that change the verb from its <em>lexical form</em> (think \"dictionary form\" in French) to it's fully conjugated, fully <em>inflected</em> form. For example:</p>\n\n<blockquote>\n  <p>\"to do\" + \"past neg\" = \"didn't\"</p>\n</blockquote>\n\n<p>In this example, \"past neg\" is the inflection (\"I\"). As you can probably guess, IPs have the following structure:</p>\n\n<blockquote>\n  <p>IP > [I vP]</p>\n</blockquote>\n\n<p>vP (pronounced \"little v P\") is a type of phrase needed because of the double object verbs I talked about above. For your purposes, just think of it as a VP.</p>\n\n<p>Finally, I would strongly suggest you first skim an introductory syntax textbook or try to find some introductory lecture slides online because syntax, especially minimalism, has a tendency to build on itself. Without a strong foundation it is hard to understand the more advanced topics. Unfortunately, the book you are reading sounds at least moderately advanced. My school uses <a href=\"http://books.google.co.kr/books/about/Syntax.html?id=UWTAU8lAunoC&amp;redir_esc=y\" rel=\"nofollow\">Syntax: A Generative Introduction</a> by Andrew Carnie and also <a href=\"http://books.google.co.kr/books/about/Core_Syntax.html?id=GMJ1QgAACAAJ&amp;redir_esc=y\" rel=\"nofollow\">Core Syntax: A Minimalist Approach</a> by David Adger in its syntax courses. Both books are good, but I think that Carnie's writing style is a bit more engaging. I think a quick look at one of these books would be quite helpful.</p>\n", "Id":"2726", "ParentId":"2724", "LastEditorUserId":"1055", "CreationDate":"2012-10-21T01:58:46.963", "OwnerUserId":"1055", "PostTypeId":"2", "comments":[], "LastEditDate":"2012-10-22T02:20:26.847", "LastEditedUser":{"UpVotes":"102", "WebsiteUrl":"", "Location":"Seoul, South Korea", "Id":"1055", "DownVotes":"9", "AccountId":"1453460", "Views":"21", "Reputation":"1947", "CreationDate":"2012-05-29T05:50:57.073", "DisplayName":"acattle", "LastAccessDate":"2014-01-17T00:59:41.983", "AboutMe":"<p>I am currently studying for an MA in Computational Linguistics even though my background is not in linguistics. I discovered Computational Linguistics while receiving my B.A.Sc in Software Engineering when I built a basic bigram parser for an AI assignment. This caused me to become interested in linguistics and to take a few introductory level courses. I currently have completed my first year of my masters and am currently looking for a thesis topic.</p>\n"}, "LastActivityDate":"2012-10-22T02:20:26.847", "Score":"1", "OwnerUser":{"UpVotes":"102", "WebsiteUrl":"", "Location":"Seoul, South Korea", "Id":"1055", "DownVotes":"9", "AccountId":"1453460", "Views":"21", "Reputation":"1947", "CreationDate":"2012-05-29T05:50:57.073", "DisplayName":"acattle", "LastAccessDate":"2014-01-17T00:59:41.983", "AboutMe":"<p>I am currently studying for an MA in Computational Linguistics even though my background is not in linguistics. I discovered Computational Linguistics while receiving my B.A.Sc in Software Engineering when I built a basic bigram parser for an AI assignment. This caused me to become interested in linguistics and to take a few introductory level courses. I currently have completed my first year of my masters and am currently looking for a thesis topic.</p>\n"}}